apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return !is_snaptshot
}

def getRepositoryUsername() {
    return findProperty('SONATYPE_NEXUS_USERNAME') ?: System.getenv('SONATYPE_NEXUS_USERNAME') ?: ""
}

def getRepositoryPassword() {
    return findProperty('SONATYPE_NEXUS_PASSWORD') ?: System.getenv('SONATYPE_NEXUS_PASSWORD') ?: ""
}

if (!project.tasks.findByName('sourcesJar')) {
    task sourcesJar(type: Jar) {
        archiveClassifier.set('sources')
        if (pluginManager.hasPlugin('com.android.library')) {
            from android.sourceSets.main.java.srcDirs
        } else {
            from sourceSets.main.java.srcDirs
        }
    }
}

artifacts {
    archives dokkaJar
    archives sourcesJar
}

// OSS Sonatype Repo
// s01.oss.sonatype.com
def OSSRepo = "s01.oss.sonatype.org"
//def OSSRepo = "oss.sonatype.org"

afterEvaluate {
    publishing {
        repositories {
            maven {
                name "snapshot"
                url = "https://$OSSRepo/content/repositories/snapshots"
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
            maven {
                name "staging"
                url = "https://$OSSRepo/service/local/staging/deploy/maven2"
                credentials {
                    username = getRepositoryUsername()
                    password = getRepositoryPassword()
                }
            }
        }

        if (!pluginManager.hasPlugin('org.jetbrains.kotlin.multiplatform')) {
            publications {
                release(MavenPublication) {
                    if (pluginManager.hasPlugin('com.android.library')) {
                        from components.release
                    } else {
                        from components.java
                    }
                    artifact sourcesJar
                    artifactId = project.name
                }
            }
        }

        publications.all {
            artifact dokkaJar

            pom.withXml {
                def root = asNode()

                root.children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST

                    description "KOIN - Kotlin simple Dependency Injection Framework"
                    name project.name
                    url "https://insert-koin.io/"
                    licenses {
                        license {
                            name "The Apache Software License, Version 2.0"
                            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                        }
                    }
                    scm {
                        url "https://github.com/InsertKoinIO/koin"
                        connection "scm:git:git://github.com/InsertKoinIO/koin.git"
                        developerConnection "scm:git:git://github.com/InsertKoinIO/koin.git"
                    }
                    developers {
                        developer {
                            id "arnaudgiuliani"
                            name "Arnaud Giuliani"
                        }
                    }
                }
            }
        }
    }

    if (isReleaseBuild()) {
        signing {
            if (pluginManager.hasPlugin('org.jetbrains.kotlin.multiplatform')) {
                publishing.publications.all {
                    sign it
                }
            } else {
                sign publishing.publications.release
            }

//            useGpgCmd()
        }
    }
}